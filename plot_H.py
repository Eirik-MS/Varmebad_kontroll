import numpy as np
import scipy.optimize as opt
import matplotlib.pyplot as plt

# Data vannbad (kommenter ut den andre hvis du vil ha denne)
"""
m = 6.9  ; T_omg = 20  ;  data = [
    (0, 54.75), (15, 54.50), (30, 54.75), (45, 54.00), (60, 54.25),(75, 54.25), (90, 54.00), (105, 54.25), (120, 54.00), (135, 54.50),(150, 54.50), (165, 54.50), 
    (180, 54.25), (195, 54.00), (210, 54.25),(225, 53.75), (240, 54.00), (255, 54.00), (270, 54.25), (285, 53.75),(300, 53.75), (315, 54.00), (330, 54.00), (345, 54.00), 
    (360, 53.75),(375, 53.75), (390, 53.75), (405, 53.75), (420, 53.75), (435, 53.75),(450, 53.50), (465, 53.25), (480, 53.75), (495, 54.00), (510, 53.75),(525, 53.25), 
    (540, 53.50), (555, 53.75), (570, 53.50), (585, 53.25),(600, 53.50), (615, 53.75), (630, 53.75), (645, 53.50), (660, 53.50),(675, 53.25), (690, 53.25), (705, 53.50), 
    (720, 53.25), (735, 52.75),(750, 53.25), (765, 53.25), (780, 53.50), (795, 53.25), (810, 53.00),(825, 52.75), (840, 53.00), (855, 52.50), (870, 53.25), (885, 52.50),
    (900, 53.25), (915, 52.75), (930, 52.75), (960, 52.75), (975, 52.75),(990, 52.75), (1005, 52.00), (1020, 52.50), (1035, 52.50), (1050, 52.75),(1065, 53.00), (1080, 52.50), 
    (1095, 52.50), (1110, 52.50), (1125, 52.75),(1140, 52.25), (1155, 52.50), (1170, 52.25), (1185, 52.25), (1200, 52.50),(1215, 52.25), (1230, 52.75), (1245, 52.25), (1260, 52.25), 
    (1275, 52.00),(1290, 51.75), (1305, 52.00), (1320, 52.00), (1335, 52.50), (1350, 52.00),(1365, 52.00), (1380, 52.00), (1395, 51.50), (1410, 52.00), (1425, 51.75),(1460, 51.75), 
    (1475, 51.50), (1490, 51.25), (1505, 51.50), (1520, 51.50),(1535, 51.25), (1550, 51.50), (1565, 51.75), (1580, 51.75), (1595, 51.25),(1610, 51.75), (1625, 51.25), (1640, 51.25), 
    (1655, 51.25), (1670, 51.50),    (1685, 51.50), (1700, 51.25), (1715, 51.25), (1730, 51.50), (1745, 51.50),(1760, 51.00), (1775, 51.50), (1790, 51.00), (1805, 51.00), (1820, 51.00),
    (1835, 51.25), (1850, 51.50), (1865, 50.50), (1880, 51.00), (1895, 51.25),(1910, 50.75), (1925, 51.00), (1940, 51.25)
]
"""
m = 1  ; T_omg = 47.7  ;  data = [
    (0, 17.75), (5, 17.5), (10, 16.0), (15, 17.75), (20, 17.0), (25, 16.5), (30, 17.5), (35, 19.5), (40, 19.5), (45, 18.75), (50, 19.25), (55, 18.75), (60, 20.0), (65, 20.5), (70, 21.5), 
    (75, 22.0), (80, 22.25), (85, 22.5), (90, 22.25), (95, 23.25), (100, 22.75), (105, 22.75), (110, 23.0), (115, 23.0), (120, 23.5), (125, 24.75), (130, 25.0), (135, 25.25), (140, 25.5), 
    (145, 26.0), (150, 25.25), (155, 25.0), (160, 27.25), (165, 26.25), (170, 26.0), (175, 26.0), (180, 27.25), (185, 27.25), (190, 28.0), (195, 27.5), (200, 28.0), (205, 28.0), (210, 28.5), 
    (215, 28.0), (220, 28.25), (225, 28.75), (230, 28.5), (235, 28.75), (240, 29.25), (245, 29.5), (250, 29.75), (255, 29.25), (260, 29.75), (265, 30.0), (270, 29.75), (275, 29.75), (280, 30.0), 
    (285, 29.75), (290, 30.0), (295, 30.25), (300, 30.25), (305, 30.5), (310, 30.25), (315, 30.75), (320, 31.5), (325, 32.5), (330, 33.25), (335, 33.5), (340, 33.5), (345, 33.5), (350, 33.25), 
    (355, 33.25), (360, 33.75), (365, 33.75), (370, 34.0), (375, 34.5), (380, 34.5), (385, 34.75), (390, 35.0), (395, 36.0), (400, 35.0), (405, 35.75), (410, 35.25), (415, 35.75)
]

# Konverter til numpy arrays
time = np.array([t for t, T in data])
temp = np.array([T for t, T in data])

# Start- og omgivelsestemperaturer
T0 = temp[0]  # Starttemperatur

# Eksponentiell tilpasning
def exp_decay(t, tau, T_inf):
    return (T0 - T_inf) * np.exp(-t / tau) + T_inf

# Fit eksponentiell modell
params, _ = opt.curve_fit(exp_decay, time, temp, p0=[500, T_omg])
tau_fit, T_inf_fit = params

# Beregn varmeovergangskoeffisient H
c_p = 4184  # J/kgK

H = m * c_p / tau_fit

# Plot resultater
plt.figure(figsize=(8, 5))
plt.scatter(time, temp, label="Målt temperatur", color="blue", s=10)
plt.plot(time, exp_decay(time, *params), label=f"Fit: H={H:.2f} [W/K]", color="red")
#plt.axhline(T_omg, linestyle="--", color="green", label="Omgivelsestemperatur")
plt.xlabel("Tid (s)")
plt.ylabel("Temperatur (°C)")
plt.legend()
plt.title("Temperaturavkjøling og eksponentiell tilpasning")
plt.show()

H, tau_fit